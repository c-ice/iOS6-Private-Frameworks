/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "IMSystemMonitorListener-Protocol.h"

@class IMAVChatFeature, IMAVChatParticipant, IMAccount, IMHandle, IMPair, NSArray, NSData, NSDate, NSDictionary, NSError, NSMutableArray, NSMutableDictionary, NSNumber, NSObject<OS_dispatch_queue>, NSString, NSTimer;

@interface IMAVChat : NSObject <IMSystemMonitorListener>
{
    NSString *_GUID;
    NSString *_conferenceID;
    NSMutableArray *_participants;
    IMHandle *_initiator;
    IMAVChatParticipant *_localParticipant;
    NSNumber *_natType;
    NSMutableDictionary *_extraServerContext;
    NSDictionary *_errorDict;
    NSDate *_dateCreated;
    NSDate *_dateStartedConnecting;
    NSDate *_dateConnected;
    NSDate *_dateEnded;
    NSDate *_dateReceivedRelayInitiate;
    NSDate *_dateReceivedRelayUpdate;
    NSDate *_interruptionBegan;
    NSString *_participantNames;
    NSDictionary *_pingTestResults;
    NSNumber *_frontCameraCaptureTime;
    NSNumber *_backCameraCaptureTime;
    NSNumber *_dataRate;
    NSNumber *_dataUploaded;
    NSNumber *_dataDownloaded;
    unsigned int _localNetworkConnectionType;
    unsigned int _remoteNetworkConnectionType;
    NSData *_connectData;
    NSDictionary *_callerProperties;
    NSMutableDictionary *_unknownPartyStates;
    NSObject<OS_dispatch_queue> *_queue;
    NSTimer *_inviteTimeoutTimer;
    NSDate *_inviteTimeoutTimerStart;
    NSTimer *_firstFrameTimeoutTimer;
    NSTimer *_connectionTimeoutTimer;
    NSTimer *_breakBeforeMakeTimeoutTimer;
    id _conferenceController;
    int _callID;
    unsigned int _sessionID;
    unsigned int _addStatus;
    NSError *_error;
    int _addableParticipants;
    unsigned int _localState;
    unsigned int _lastPostedState;
    IMPair *_pendingPreemptiveRelayInitate;
    NSString *_callStatisticsGUID;
    struct CGSize _portraitAspectRatios;
    struct CGSize _landscapeAspectRatios;
    double _connectionTimeoutTime;
    double _invitationTimeoutTime;
    BOOL _hasGatheredInfo;
    BOOL _hasReceivedFirstFrame;
    BOOL _isListening;
    BOOL _isCounterProposalConnect;
    BOOL _hasPendingAccept;
    BOOL _hasPendingInit;
    BOOL _isTerminating;
    BOOL _Q8IrisOpen;
    BOOL _usingCoercedIDs;
    BOOL _suppressBeginChat;
    BOOL _isCaller;
    BOOL _isVideo;
    BOOL _dataOut;
    BOOL _dataIn;
    BOOL _didRemoteMute;
    BOOL _didRemotePause;
    BOOL _participantOrderFinal;
    int _connectionType;
    BOOL _needsVideoRestart;
    BOOL _needsAudioRestart;
    BOOL _airplaneModeEnabled;
    BOOL _isVideoInterrupted;
    BOOL _isAudioInterrupted;
    IMAVChatFeature *_recorder;
    IMAVChatFeature *_auxVideo;
    IMAVChatFeature *_ard;
    BOOL __isCallUpgrade;
}

+ (int)systemSupportsNewOutgoingConferenceTo:(id)arg1 isVideo:(BOOL)arg2;
+ (id)allowedClassesForArchives;
+ (id)alloc;
+ (void)setDefaultConnectionTimeoutTime:(double)arg1;
+ (double)defaultConnectionTimeoutTime;
+ (void)setDefaultInvitationTimeoutTime:(double)arg1;
+ (double)defaultInvitationTimeoutTime;
+ (BOOL)isStateActive:(unsigned int)arg1;
+ (BOOL)isStateFinal:(unsigned int)arg1;
+ (int)maxRemoteParticipantsVideo:(BOOL)arg1;
+ (id)avChatWithMatchingIMHandles:(id)arg1 video:(BOOL)arg2;
+ (id)avChatConnectingFromIMHandle:(id)arg1;
+ (id)avChatWaitingForReplyFromIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)avChatInvitedByIMHandle:(id)arg1 orConferenceID:(id)arg2;
+ (id)bestGuessAVChatWithIMHandle:(id)arg1 conferenceID:(id)arg2 sessionID:(unsigned int)arg3 properties:(id)arg4;
+ (id)chatsWithIMAVChatState:(unsigned int)arg1;
+ (id)acceptedChats;
+ (id)connectedChats;
+ (id)connectingChats;
+ (id)outgoingInvitations;
+ (id)incomingInvitations;
+ (id)avChatWithConferenceID:(id)arg1;
+ (id)nonFinalChat;
+ (id)activeChat;
+ (id)connectedChat;
+ (id)chatList;
+ (id)chatWithSessionID:(unsigned int)arg1;
+ (id)_avChatArray;
@property(nonatomic, setter=_setIsCallUpgrade:) BOOL _isCallUpgrade; // @synthesize _isCallUpgrade=__isCallUpgrade;
@property(retain, nonatomic, setter=_setPingTestResults:) NSDictionary *_pingTestResults; // @synthesize _pingTestResults;
@property(readonly) NSDictionary *_extraServerContext; // @synthesize _extraServerContext;
@property(retain, nonatomic) NSArray *participants; // @synthesize participants=_participants;
@property(readonly, nonatomic) IMAVChatParticipant *localParticipant; // @synthesize localParticipant=_localParticipant;
- (void)_setState:(unsigned int)arg1;
@property(nonatomic) unsigned int state; // @synthesize state=_localState;
@property(readonly, nonatomic) unsigned int addStatus; // @synthesize addStatus=_addStatus;
@property(readonly, nonatomic) int addableParticipants; // @synthesize addableParticipants=_addableParticipants;
@property(retain, nonatomic, setter=_setDateEnded:) NSDate *dateEnded; // @synthesize dateEnded=_dateEnded;
@property(readonly, nonatomic) NSDate *dateCreated; // @synthesize dateCreated=_dateCreated;
@property(readonly, nonatomic) NSDate *dateConnected; // @synthesize dateConnected=_dateConnected;
@property(nonatomic, setter=_setConferenceController:) id _conferenceController; // @synthesize _conferenceController;
- (void)_setGUID:(id)arg1;
@property(retain, nonatomic) NSString *GUID; // @synthesize GUID=_GUID;
@property(retain, nonatomic) NSString *conferenceID; // @synthesize conferenceID=_conferenceID;
@property(nonatomic) int callID; // @synthesize callID=_callID;
@property(readonly, nonatomic) BOOL dataIn; // @synthesize dataIn=_dataIn;
@property(readonly, nonatomic) BOOL dataOut; // @synthesize dataOut=_dataOut;
@property(nonatomic, setter=_setIsCaller:) BOOL isCaller; // @synthesize isCaller=_isCaller;
@property(nonatomic, setter=_setIsCounterProposalConnect:) BOOL _isCounterProposalConnect; // @synthesize _isCounterProposalConnect;
@property(nonatomic, setter=_setSuppressBeginChat:) BOOL suppressBeginChat; // @synthesize suppressBeginChat=_suppressBeginChat;
@property(nonatomic, setter=_setParticipantOrderFinal:) BOOL participantOrderFinal; // @synthesize participantOrderFinal=_participantOrderFinal;
@property(nonatomic, setter=_setIsAudioInterrupted:) BOOL _isAudioInterrupted; // @synthesize _isAudioInterrupted;
@property(nonatomic, setter=_setIsVideoInterrupted:) BOOL _isVideoInterrupted; // @synthesize _isVideoInterrupted;
@property(retain, nonatomic, setter=_setDataDownloaded:) NSNumber *_dataDownloaded; // @synthesize _dataDownloaded;
@property(retain, nonatomic, setter=_setDataUploaded:) NSNumber *_dataUploaded; // @synthesize _dataUploaded;
@property(retain, nonatomic, setter=_setDataRate:) NSNumber *_dataRate; // @synthesize _dataRate;
@property(retain, nonatomic, setter=_setBackCameraCaptureTime:) NSNumber *_backCameraCaptureTime; // @synthesize _backCameraCaptureTime;
@property(retain, nonatomic, setter=_setFrontCameraCaptureTime:) NSNumber *_frontCameraCaptureTime; // @synthesize _frontCameraCaptureTime;
@property(retain, nonatomic, setter=_setInterruptionBegan:) NSDate *_interruptionBegan; // @synthesize _interruptionBegan;
@property(nonatomic, setter=_setUsingCoercedIDs:) BOOL _usingCoercedIDs; // @synthesize _usingCoercedIDs;
@property(nonatomic, setter=_setHasPendingAccept:) BOOL _hasPendingAccept; // @synthesize _hasPendingAccept;
@property(nonatomic, setter=_setHasPendingInit:) BOOL _hasPendingInit; // @synthesize _hasPendingInit;
@property(readonly, nonatomic) BOOL _isTeminating; // @synthesize _isTeminating=_isTerminating;
@property(retain, nonatomic, setter=_setConnectData:) NSData *_connectData; // @synthesize _connectData;
@property(nonatomic, setter=_setIsListening:) BOOL _isListening; // @synthesize _isListening;
@property(nonatomic, setter=_setIsVideo:) BOOL isVideo; // @synthesize isVideo=_isVideo;
@property(nonatomic, setter=_setNeedsVideoRestart:) BOOL _needsVideoRestart; // @synthesize _needsVideoRestart;
@property(nonatomic, setter=_setNeedsAudioRestart:) BOOL _needsAudioRestart; // @synthesize _needsAudioRestart;
@property(nonatomic, setter=_setRemoteNetworkConnectionType:) unsigned int _remoteNetworkConnectionType; // @synthesize _remoteNetworkConnectionType;
@property(nonatomic, setter=_setLocalNetworkConnectionType:) unsigned int _localNetworkConnectionType; // @synthesize _localNetworkConnectionType;
@property(retain, nonatomic, setter=_setNatType:) NSNumber *_natType; // @synthesize _natType;
- (void)_setInitiatorIMHandle:(id)arg1;
@property(retain, nonatomic) IMHandle *initiatorIMHandle; // @synthesize initiatorIMHandle=_initiator;
@property(retain, nonatomic, setter=_setCallerProperties:) NSDictionary *callerProperties; // @synthesize callerProperties=_callerProperties;
- (void)_setSessionID:(unsigned int)arg1;
@property(nonatomic) unsigned int sessionID; // @synthesize sessionID=_sessionID;
@property(readonly, nonatomic) BOOL isQ8IrisOpen; // @synthesize isQ8IrisOpen=_Q8IrisOpen;
@property(retain, nonatomic, setter=_setCallStatisticsGUID:) NSString *_callStatisticsGUID; // @synthesize _callStatisticsGUID;
@property(nonatomic, setter=_setConnectionType:) int _connectionType; // @synthesize _connectionType;
@property(nonatomic, setter=_setQueue:) NSObject<OS_dispatch_queue> *_queue; // @synthesize _queue;
- (void)_noteFirstFrame;
- (void)_postNotificationName:(id)arg1 participant:(id)arg2 userInfo:(id)arg3;
- (void)_postNotificationName:(id)arg1 userInfo:(id)arg2;
- (void)_reportError:(id)arg1;
- (void)_setErrorDictionary:(id)arg1;
@property(readonly, nonatomic) NSDictionary *errorDictionary;
- (void)_handleAVError:(id)arg1;
@property(readonly, nonatomic) BOOL _usesRelay;
@property(readonly, nonatomic) NSNumber *_relayConnectDuration;
@property(readonly, nonatomic) NSNumber *_callDuration;
@property(readonly, nonatomic) NSNumber *_connectDuration;
@property(readonly, nonatomic) NSNumber *_currentNatType;
@property(readonly, nonatomic) NSNumber *_remoteNatType;
- (BOOL)isConferenceSilent;
- (void)_setLocalParticipant:(id)arg1;
- (void)_setParticipants:(id)arg1;
- (void)_setAddableParticipants:(int)arg1;
- (void)_setAddStatus:(unsigned int)arg1;
- (void)_setQ8IrisOpen:(BOOL)arg1;
- (void)_setDataIn:(BOOL)arg1;
- (void)_setDataOut:(BOOL)arg1;
- (void)_setCreationDate;
@property(readonly, nonatomic) unsigned int endedReason;
@property(readonly, nonatomic) int endedError;
- (void)_setConferenceID:(id)arg1;
@property(readonly, nonatomic) IMAccount *account;
@property(readonly, nonatomic) IMHandle *otherIMHandle;
- (id)participantMatchingIMHandle:(id)arg1;
- (id)vcPartyIDForIMHandle:(id)arg1;
- (id)participantWithID:(id)arg1;
@property(readonly, nonatomic) NSString *participantNames;
- (void)invalidateParticipantNames;
- (void)handleVideoConferenceNotification:(id)arg1;
- (void)_participantsChanged:(id)arg1;
- (void)_inviteeInfoChanged:(id)arg1;
- (void)_initiatorInfoChanged:(id)arg1;
- (void)handleGenericAVMessageFromParticipant:(id)arg1 type:(unsigned int)arg2 userInfo:(id)arg3;
- (void)_handleGenericAVMessageFromParticipant:(id)arg1 type:(unsigned int)arg2 userInfo:(id)arg3 handled:(BOOL)arg4;
- (void)_VCCounterProposal:(id)arg1;
- (void)_responseToVCInvite:(id)arg1;
- (void)__responseToVCInvite:(id)arg1;
- (void)_counterPropose:(id)arg1;
- (BOOL)_checkVCResponseDict:(id)arg1;
- (void)_threadedPrepareConnectionForInvitedParty:(id)arg1;
- (void)_mainThreadFinishPrepareConnectionForInvitedParty:(id)arg1;
- (void)_prepareConnectionForParticipant:(id)arg1;
- (void)_connectTo:(id)arg1 withData:(id)arg2;
- (void)_setStateDisconnected;
- (void)sendARDFileTransferAuthorization:(id)arg1 to:(id)arg2;
- (void)declineInvitation;
- (void)declineInvitationWithResponse:(unsigned int)arg1;
- (void)acceptInvitation;
- (void)invite:(id)arg1;
- (void)_sendVCUpdateTo:(id)arg1 skipConnected:(BOOL)arg2;
- (void)cancelInvitation;
- (void)_cancelInvitationWithReason:(unsigned int)arg1 error:(int)arg2;
- (void)inviteAll;
- (id)inviteesInfoAsPlist:(BOOL)arg1 account:(id)arg2;
- (void)endChatWithReason:(unsigned int)arg1 error:(int)arg2;
- (void)_endChatWithReason:(unsigned int)arg1 andError:(int)arg2;
- (void)_sendEndCallMetricWithReason:(unsigned int)arg1 andError:(int)arg2;
- (void)endChatWithError:(int)arg1;
- (void)endChatWithReason:(unsigned int)arg1;
- (void)_reallyEndChatWithError:(id)arg1;
- (void)endChat;
- (void)beginChat;
- (id)description;
- (void)dealloc;
- (id)initOutgoingTo:(id)arg1 isVideo:(BOOL)arg2;
- (id)initIncomingFrom:(id)arg1 isVideo:(BOOL)arg2 callerProperties:(id)arg3;
- (id)_initWith:(id)arg1 invitedBy:(id)arg2 sessionID:(unsigned int)arg3 video:(BOOL)arg4 extraProperties:(id)arg5;
- (void)_determineDataIn;
@property(nonatomic) void *localVideoBackLayer;
@property(nonatomic) void *localVideoLayer;
- (void)setLocalAspectRatio:(struct CGSize)arg1 cameraOrientation:(unsigned int)arg2 cameraType:(unsigned int)arg3;
- (struct CGSize)localAspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
@property(nonatomic) BOOL lockCamera;
@property(nonatomic) unsigned int cameraOrientation;
@property(nonatomic) unsigned int cameraType;
- (void)_postParticipantMediaChangeNotification:(id)arg1 cameraChanged:(BOOL)arg2 orientationChanged:(BOOL)arg3 aspectChanged:(BOOL)arg4 cameraWillSwitch:(BOOL)arg5 camera:(unsigned int)arg6 orientation:(unsigned int)arg7 aspect:(struct CGSize)arg8;
- (BOOL)stopPreview;
- (BOOL)startPreviewWithError:(id *)arg1;
- (BOOL)closeCamera;
- (BOOL)openCamera;
@property(nonatomic) double connectionTimeoutTime;
@property(nonatomic) double invitationTimeoutTime;
- (void)_breakBeforeMakeTimer:(id)arg1;
- (void)_setBreakBeforeMakeTimer;
- (void)_clearBreakBeforeMakeTimer;
- (void)_firstFrameTimeout:(id)arg1;
- (void)_setFirstFrameTimeoutTimer;
- (void)_clearFirstFrameTimeoutTimer;
- (void)_reduceInvitationTimeoutTime;
- (void)_invitationTimeout:(id)arg1;
- (void)_setInvitationTimeoutTimer;
- (void)_clearInvitationTimeoutTimer;
- (void)_connectionTimeout:(id)arg1;
- (void)_setConnectionTimeoutTimer;
- (void)_clearConnectionTimeoutTimer;
- (void)auxVideoEndedForPersonWithID:(id)arg1;
- (void)auxVideoBeganForPersonWithID:(id)arg1;
- (void)conferencePersonWithID:(id)arg1 approvedAuxVideo:(BOOL)arg2;
- (BOOL)shouldConferenceAcceptAuxVideoFromUser:(id)arg1;
- (void)_vccInitDidFinish:(id)arg1;
- (void)startVCOnMainThread:(id)arg1;
- (void)_noteConferenceConnected:(id)arg1;
- (void)conferencePersonWithID:(id)arg1 sendRelayCancel:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayUpdate:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 sendRelayRequest:(id)arg2;
- (void)conferenceHasTimedOut;
- (void)conferenceHasVideoError;
- (void)conferencePersonWithID:(id)arg1 hasInfoForNoPackets:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 hasInfoForInsufficientBandwidth:(id)arg2;
- (void)conferencePersonWithID:(id)arg1 mediaDidStall:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didDegrade:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didStall:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didPause:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didMute:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didCancel:(BOOL)arg2;
- (void)conferencePersonWithID:(id)arg1 didConnect:(BOOL)arg2;
- (void)conferenceHungUpByPersonWithID:(id)arg1;
- (void)conferencePersonWithID:(id)arg1 completedWithInfo:(id)arg2;
- (void)_unknownParty:(id)arg1 muteOrPause:(unsigned int)arg2 didChange:(BOOL)arg3;
- (void)_unknownParty:(id)arg1 didConnect:(BOOL)arg2;
- (void)toggleSendingAudio;
@property(nonatomic) BOOL isSendingAudio;
@property(readonly, nonatomic) BOOL didRemoteMute;
- (void)toggleChatMute;
@property(readonly, nonatomic) BOOL isChatMute;
- (void)toggleRemoteMute;
@property(nonatomic, setter=setRemoteMute:) BOOL isRemoteMute;
- (void)toggleMute;
@property(nonatomic, setter=setMute:) BOOL isMute;
- (BOOL)isLocalNetworkStalled;
- (void)toggleSendingVideo;
@property(nonatomic) BOOL allowsVideo;
@property(nonatomic) BOOL isSendingVideo;
@property(readonly, nonatomic) BOOL didRemotePause;
- (void)toggleChatPaused;
@property(readonly, nonatomic) BOOL isChatPaused;
- (void)toggleRemotePaused;
@property(nonatomic, setter=setRemotePaused:) BOOL isRemotePaused;
- (void)togglePaused;
@property(nonatomic, setter=setPaused:) BOOL isPaused;
@property(readonly, nonatomic) BOOL hasReceivedFirstFrame;
- (int)_initialRelayStatus;
@property(readonly, nonatomic) BOOL canUseRelay; // @dynamic canUseRelay;
- (void)_relayPropose:(id)arg1;
- (void)_handleRelayCancel:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2;
- (void)_handleRelayInitate:(id)arg1 fromParticipant:(id)arg2;
- (void)_entitlementsChanged:(id)arg1;
- (void)_airplaneModeChanged:(id)arg1;
- (void)systemWillShutdown;
- (void)notificationCenterDidDisappear;
- (void)notificationCenterWillAppear;
- (void)systemApplicationDidResumeForEventsOnly;
- (void)systemApplicationDidResume;
- (void)systemApplicationDidSuspend;
- (void)systemApplicationWillEnterForeground;
- (void)systemApplicationDidEnterBackground;
- (void)systemApplicationDidBecomeActive;
- (void)_resumeVideoState;
- (void)_resumeAudioState;
- (void)_saveVideoRestartState;
- (void)_saveAudioRestartState;
- (void)systemDidFastUserSwitchOut;
- (void)_postStateToDelegateIfNecessary;
- (void)participant:(id)arg1 changedFromState:(unsigned int)arg2 toState:(unsigned int)arg3;
- (void)_setActiveConference;
@property(readonly, nonatomic) BOOL isActive; // @dynamic isActive;
@property(readonly, nonatomic) BOOL isStateFinal; // @dynamic isStateFinal;
- (void)finalizeOrderWithVideoFrom:(id)arg1;
- (id)orderedRemotePartyIDs;
- (id)stringForAddStatus;
- (id)stringForAddStatus:(unsigned int)arg1;
- (id)_participantMatchingVCPartyID:(id)arg1;
- (void)_refreshAddableStatus;
@property(readonly, nonatomic) BOOL _allParticipantsUsingICE;
@property(readonly, nonatomic) int numActiveParticipants; // @dynamic numActiveParticipants;
@property(readonly, nonatomic) NSArray *remoteParticipants; // @dynamic remoteParticipants;
@property(readonly, nonatomic) IMAVChatParticipant *initiatorParticipant; // @dynamic initiatorParticipant;
- (BOOL)_participantsCheckOut;
- (void)_initParticipantsWithNuggets:(id)arg1;
- (void)_initParticipantsWithIMHandles:(id)arg1;
- (BOOL)_imHandlesRequireCoercedIDs:(id)arg1;
- (void)_updateParticipantsWithData:(id)arg1;
- (id)participantsNotInNuggets:(id)arg1;
- (void)_finalizeParticipantOrder:(id)arg1 andNotify:(BOOL)arg2;
- (BOOL)_moveVCPartyID:(id)arg1 toIndex:(unsigned int)arg2 inCount:(unsigned int)arg3;
- (void)_insertRemoteParticipant:(id)arg1 atIndex:(unsigned int)arg2;
- (void)_updateIMHandleInBuddyList:(id)arg1;
- (void)_peerID:(id)arg1 changedTo:(id)arg2;

@end

