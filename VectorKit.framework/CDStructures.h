/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

@class NSArray;

#pragma mark Named Structures

struct AltitudeDebugSettings {
    char altitudePauseLoading;
    char altitudeShowTileBounds;
    float lodScale;
    float animationSpinTime;
};

struct CGFont;

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct CollisionObject {
    struct Label *_field1;
    int _field2;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field3;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field4;
    CDStruct_183601bc *_field5;
    CDStruct_183601bc *_field6;
    unsigned int _field7;
};

struct Flow {
    long long _field1;
    float _field2;
    float _field3;
    int _field4;
};

struct GeoCoordinates {
    struct Longitude _field1;
    struct Latitude _field2;
};

struct GlobeView {
    void **_field1;
};

struct Incident {
    struct GeoCoordinates _field1;
    struct String _field2;
    struct String _field3;
    int _field4;
    struct String _field5;
    struct String _field6;
    long long _field7;
    long long _field8;
    long long _field9;
    int _field10;
    unsigned char _field11;
    _Bool _field12;
};

struct Label;

struct LabelCollider {
    struct vector<vk::CollisionObject *, vk_allocator<vk::CollisionObject *>> _objects;
    struct vector<vk::SapEntry, vk_allocator<vk::SapEntry>> _axisY;
    struct vector<vk::SapOverlap, vk_allocator<vk::SapOverlap>> _overlaps;
};

struct LabelContext {
    id _field1;
    id _field2;
    id _field3;
    id _field4;
    struct ViewTransform *_field5;
    int _field6;
    int _field7;
    unsigned int _field8;
    float _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    _Bool _field14;
    _Bool _field15;
    int _field16;
    CDStruct_aca18c62 _field17;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field18;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field19;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field20;
    int _field21;
};

struct LabelFeature {
    void **_field1;
    vector_51094ce7 _field2;
    unsigned long long _field3;
    unsigned long long _field4;
    float _field5;
    unsigned int _field6;
    id _field7;
    id _field8;
    int _field9;
    id _field10;
    struct shared_ptr<const vk::LabelFeatureText> _field11;
    struct LabelFeatureTileData *_field12;
    struct mutex _field13;
    struct LabelFeatureTileData *_field14;
    int _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
};

struct LabelFeatureArray<vk::LabelFeaturePoint> {
    unsigned int _field1;
    unsigned int _field2;
    struct LabelFeaturePoint **_field3;
    _Bool _field4;
    id _field5;
    _Bool _field6;
};

struct LabelFeatureArray<vk::LabelFeaturePolygon> {
    unsigned int _field1;
    unsigned int _field2;
    struct LabelFeaturePolygon **_field3;
    _Bool _field4;
    id _field5;
    _Bool _field6;
};

struct LabelFeatureArray<vk::LabelFeatureRoad> {
    unsigned int _field1;
    unsigned int _field2;
    struct LabelFeatureRoad **_field3;
    _Bool _field4;
    id _field5;
    _Bool _field6;
};

struct LabelFeaturePoint;

struct LabelFeaturePolygon;

struct LabelFeatureRoad;

struct LabelFeatureText;

struct LabelFeatureTileData;

struct LabelNavJunctionInfo;

struct Latitude {
    unsigned int _field1;
};

struct LineDash;

struct LineStipple;

struct Longitude {
    unsigned int _field1;
};

struct Record {
    unsigned int _field1;
    unsigned int _field2;
    float _field3;
    float _field4;
    long long _field5;
    int _field6;
    float _field7;
    float _field8;
};

struct RouteCalibration {
    unsigned int _field1;
    float _field2;
};

struct RouteJunctionInfo;

struct SapEntry;

struct SapOverlap;

struct String {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned int _field1;
                    unsigned int _field2;
                    char *_field3;
                } _field1;
                struct __short {
                    union {
                        unsigned char _field1;
                        char _field2;
                    } _field1;
                    char _field2[11];
                } _field2;
                struct __raw {
                    unsigned long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct TrafficAccum {
    int _field1;
    struct vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>> _field2;
    int _field3;
    int _field4;
    int _field5;
    id _field6;
    int _field7;
    CDStruct_183601bc *_field8;
    int _field9;
    float _field10;
};

struct TrafficDynamicTile;

struct TrafficSegment {
    CDStruct_3f2a7a20 _field1;
    char _field2;
};

struct TrafficSkeletonTile {
    struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> m_records;
};

struct TrafficWalking {
    double _field1;
    int _field2;
    int _field3;
    unsigned int *_field4;
    unsigned int *_field5;
};

struct UIEdgeInsets {
    float top;
    float left;
    float bottom;
    float right;
};

struct VGLFontAtlasCell {
    int _field1;
    CDStruct_1ef3fb1f _field2;
    unsigned int _field3;
    CDStruct_183601bc *_field4;
    struct list_node<void *> *_field5;
    struct list_node<void *> *_field6;
};

struct VGLFontGlyphQuad_struct;

struct VGLFontGlyph_struct {
    unsigned short _field1;
    char _field2;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field3;
    struct CGFont *_field4;
    float _field5;
    float _field6;
    float _field7;
    struct {
        CDStruct_6e3f967a _field1;
        void *_field2;
        struct VGLFontAtlasCell *_field3;
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field4;
        struct {
            float _field1;
            float _field2;
            float _field3;
            float _field4;
        } _field5;
    } _field8;
};

struct VGLMeshLeafNode;

struct VGLMeshNode;

struct VKCacheKey {
    unsigned int a;
    unsigned int b;
    unsigned int c;
    unsigned int d;
};

struct VKCameraState {
    CDStruct_31142d93 position;
    CDStruct_aa5aacbc orientation;
    float aspectRatio;
    float verticalFieldOfView;
};

struct VKCircularBuffer<double> {
    struct vector<double, vk_allocator<double>> _field1;
    unsigned int _field2;
    _Bool _field3;
    double _field4;
};

struct VKFootprintConvexHull_struct {
    int edgeCount;
    CDStruct_31142d93 edgeOrigin[6];
    CDStruct_31142d93 edgeNormal[6];
};

struct VKGlobeRouteSplit {
    void **_field1;
    id _field2;
};

struct VKGlobeStylesheet;

struct VKPerformanceTestResult_struct {
    char *_field1;
    float _field2[5];
};

struct VKPolylineWalker {
    char *_field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct VKProfileSparseRamp<CGSize> {
    union {
        struct VKProfileSparseRampValue {
            struct CGSize value;
            unsigned char hi;
        } v[2];
        struct CGSize *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<GEOVectorTilePoint> {
    union {
        struct VKProfileSparseRampValue {
            CDStruct_6e3f967a value;
            unsigned char hi;
        } v[2];
        CDStruct_183601bc *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<VKGenericShieldStyle> {
    CDUnion_5c76812d u;
    unsigned char count;
};

struct VKProfileSparseRamp<VKLabelTextVisibility> {
    CDUnion_5c76812d u;
    unsigned char count;
};

struct VKProfileSparseRamp<_VGLColor> {
    union {
        struct VKProfileSparseRampValue {
            struct _VGLColor value;
            unsigned char hi;
        } v[2];
        struct _VGLColor *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<float> {
    union {
        struct VKProfileSparseRampValue {
            float value;
            unsigned char hi;
        } v[2];
        float *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<int> {
    CDUnion_5c76812d u;
    unsigned char count;
};

struct VKProfileSparseRamp<signed char> {
    union {
        struct VKProfileSparseRampValue {
            char value;
            unsigned char hi;
        } v[2];
        char *extra;
    } u;
    unsigned char count;
};

struct VKProfileSparseRamp<unsigned int> {
    union {
        struct VKProfileSparseRampValue {
            unsigned int value;
            unsigned char hi;
        } v[2];
        unsigned int *extra;
    } u;
    unsigned char count;
};

struct VKRibbonMakerData_t {
    id _field1;
    id _field2;
    char _field3;
    float _field4;
    float _field5;
    char _field6;
    float _field7;
    char _field8;
    char _field9;
    char _field10;
};

struct VKRouteLineFeatureCache {
    struct unordered_map<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, std::__1::equal_to<GEOMultiSectionFeature *>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *const, VKRouteLineFeature>>> _map;
    CDStruct_aca18c62 _routeLineRect;
};

struct VKRouteLineSection {
    struct vector<VKRouteMapMatchingSection::Vertex, vk_allocator<VKRouteMapMatchingSection::Vertex>> _field1;
    _Bool _field2;
    float _field3;
    float _field4;
    struct list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *>> _field5;
    struct VKPolylineWalker _field6;
    struct VKRouteLineToMeshPathMap _field7;
    CDStruct_3f2a7a20 _field8;
    CDStruct_3f2a7a20 _field9;
};

struct VKRouteLineToMeshPathMap {
    struct list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range>> _field1;
    struct __list_iterator<VKRouteLineToMeshPathMap::Range, void *> {
        struct __list_node<VKRouteLineToMeshPathMap::Range, void *> *_field1;
    } _field2;
};

struct VKTileKey {
    unsigned int z;
    int x;
    int y;
    unsigned int pointSize;
};

struct Vector2i {
    int _field1;
    int _field2;
};

struct Vertex {
    CDStruct_6e3f967a _field1;
    CDStruct_3f2a7a20 _field2;
    float _field3;
    CDStruct_183601bc *_field4;
    unsigned char _field5;
    char _field6;
    float _field7;
};

struct ViewTransform {
    void **_field1;
    int _field2;
    CDStruct_31142d93 _field3;
    CDStruct_31142d93 _field4;
    CDStruct_31142d93 _field5;
    float _field6;
    float _field7;
    _Bool _field8;
    float _field9;
    double _field10;
    CDStruct_aa5aacbc _field11;
    CDStruct_aa5aacbc _field12;
    CDStruct_aa5aacbc _field13;
    id _field14;
    float _field15;
    _Bool _field16;
    CDStruct_31142d93 _field17;
    CDStruct_31142d93 _field18;
    double _field19;
    double _field20;
    struct CGSize _field21;
    float _field22;
    CDStruct_17faa5b0 _field23;
    CDStruct_31142d93 _field24;
    CDStruct_31142d93 _field25;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _VGLColor {
    float r;
    float g;
    float b;
    float a;
};

struct _VKRealisticPolygonMetaData;

struct __hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>;

struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>;

struct __hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>;

struct __hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>;

struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>;

struct __hash_node<std::__1::pair<unsigned int, unsigned int>, void *>;

struct __list_node<VGLRouteLineMesh *, void *>;

struct __list_node<VKRouteLineToMeshPathMap::Range, void *>;

struct __shared_weak_count;

struct __wrap_iter<VGLFontGlyphQuad_struct *> {
    struct VGLFontGlyphQuad_struct *_field1;
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>;

struct bitset<16> {
    unsigned int __first_;
};

struct bitset<64> {
    unsigned long __first_[2];
};

struct data_t {
    struct root_plus_size root_plus_size_;
};

struct dynamic_bitset<unsigned long, std::__1::allocator<unsigned long>> {
    struct vector<unsigned long, std::__1::allocator<unsigned long>> m_bits;
    unsigned int m_num_bits;
};

struct list<VGLFontAtlasCell, boost::intrusive::none, boost::intrusive::none, boost::intrusive::none> {
    struct data_t data_;
};

struct list<VGLRouteLineMesh *, vk_allocator<VGLRouteLineMesh *>> {
    struct __list_node_base<VGLRouteLineMesh *, void *> {
        struct __list_node<VGLRouteLineMesh *, void *> *_field1;
        struct __list_node<VGLRouteLineMesh *, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VGLRouteLineMesh *, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct list<VKRouteLineToMeshPathMap::Range, vk_allocator<VKRouteLineToMeshPathMap::Range>> {
    struct __list_node_base<VKRouteLineToMeshPathMap::Range, void *> {
        struct __list_node<VKRouteLineToMeshPathMap::Range, void *> *_field1;
        struct __list_node<VKRouteLineToMeshPathMap::Range, void *> *_field2;
    } _field1;
    struct __compressed_pair<unsigned long, vk_allocator<std::__1::__list_node<VKRouteLineToMeshPathMap::Range, void *>>> {
        unsigned long _field1;
    } _field2;
};

struct list_node<void *> {
    struct list_node<void *> *next_;
    struct list_node<void *> *prev_;
};

struct map<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, vk_allocator<std::__1::pair<VKPolylineOverlay *const, unsigned int>>> {
    struct __tree<std::__1::pair<VKPolylineOverlay *, unsigned int>, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, unsigned int>>> {
        struct __tree_node<std::__1::pair<VKPolylineOverlay *, unsigned int>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, unsigned int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *__left_;
            } __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, unsigned int, std::__1::less<VKPolylineOverlay *>, true>> {
            unsigned long __first_;
        } __pair3_;
    } __tree_;
};

struct mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct root_plus_size {
    unsigned long size_;
    struct list_node<void *> root_;
};

struct shared_ptr<VGLMeshNode> {
    struct VGLMeshNode *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<VGLTextMeshVAO>;

struct shared_ptr<VKGlobeStylesheet> {
    struct VKGlobeStylesheet *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<bool> {
    _Bool *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const vk::LabelFeatureText> {
    struct LabelFeatureText *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<vk::Label> {
    struct Label *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<zilch::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>>> {
        struct __hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>**, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>>> {
        struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> **__first_;
        struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>> {
            struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>>> {
        struct __hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>**, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> {
        struct __hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **__first_;
        struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
            struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>**, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>>> {
        struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> **_field1;
        struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>> {
            struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>> {
                unsigned long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>**, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>>> {
        struct __hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **__first_;
        struct __bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>> {
            struct __compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>> {
                unsigned long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<(null)<anonymous>::GlyphCacheKey>, std::__1::equal_to<(null)<anonymous>::GlyphCacheKey>, std::__1::allocator<std::__1::pair<const <anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>>> {
    struct __hash_table<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, std::__1::__unordered_map_hasher<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<(null)<anonymous>::GlyphCacheKey>, true>, std::__1::__unordered_map_equal<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<(null)<anonymous>::GlyphCacheKey>, true>, std::__1::allocator<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *>*> {
                struct __hash_node<std::__1::pair<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::hash<(null)<anonymous>::GlyphCacheKey>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<(null)<anonymous>::GlyphCacheKey, VGLFontGlyph_struct *, std::__1::equal_to<(null)<anonymous>::GlyphCacheKey>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, std::__1::equal_to<GEOMultiSectionFeature *>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *const, VKRouteLineFeature>>> {
    struct __hash_table<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true>, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true>, vk_allocator<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*>, vk_allocator<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *>*> {
                struct __hash_node<std::__1::pair<GEOMultiSectionFeature *, VKRouteLineFeature>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::hash<GEOMultiSectionFeature *>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<GEOMultiSectionFeature *, VKRouteLineFeature, std::__1::equal_to<GEOMultiSectionFeature *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, std::__1::equal_to<VGLUncompressedTexture *>, std::__1::allocator<std::__1::pair<VGLUncompressedTexture *const, VGLIconSubMesh *>>> {
    struct __hash_table<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true>, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true>, std::__1::allocator<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *>*> {
                struct __hash_node<std::__1::pair<VGLUncompressedTexture *, VGLIconSubMesh *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::hash<VGLUncompressedTexture *>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<VGLUncompressedTexture *, VGLIconSubMesh *, std::__1::equal_to<VGLUncompressedTexture *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>>> {
    struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*> {
                struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>> {
            unsigned long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, unsigned int>>> {
    struct __hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *>*> {
                struct __hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, vk_allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *>>> {
    struct __hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *>*> {
                struct __hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>> {
            unsigned long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>> {
    CDStruct_183601bc *_field1;
    CDStruct_183601bc *_field2;
    struct __compressed_pair<GEOVectorTilePoint *, vk_allocator<GEOVectorTilePoint>> {
        CDStruct_183601bc *_field1;
    } _field3;
};

struct vector<LabelNavJunctionInfo, vk_allocator<LabelNavJunctionInfo>> {
    struct LabelNavJunctionInfo *__begin_;
    struct LabelNavJunctionInfo *__end_;
    struct __compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo>> {
        struct LabelNavJunctionInfo *__first_;
    } __end_cap_;
};

struct vector<LineDash, vk_allocator<LineDash>> {
    struct LineDash *__begin_;
    struct LineDash *__end_;
    struct __compressed_pair<LineDash *, vk_allocator<LineDash>> {
        struct LineDash *__first_;
    } __end_cap_;
};

struct vector<LineStipple, vk_allocator<LineStipple>> {
    struct LineStipple *__begin_;
    struct LineStipple *__end_;
    struct __compressed_pair<LineStipple *, vk_allocator<LineStipple>> {
        struct LineStipple *__first_;
    } __end_cap_;
};

struct vector<RouteJunctionInfo, vk_allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, vk_allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
};

struct vector<TrafficSegment, vk_allocator<TrafficSegment>> {
    struct TrafficSegment *__begin_;
    struct TrafficSegment *__end_;
    struct __compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment>> {
        struct TrafficSegment *__first_;
    } __end_cap_;
};

struct vector<VGLFontGlyphQuad_struct, vk_allocator<VGLFontGlyphQuad_struct>> {
    struct VGLFontGlyphQuad_struct *_field1;
    struct VGLFontGlyphQuad_struct *_field2;
    struct __compressed_pair<VGLFontGlyphQuad_struct *, vk_allocator<VGLFontGlyphQuad_struct>> {
        struct VGLFontGlyphQuad_struct *_field1;
    } _field3;
};

struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VGLGroupInfo, vk_allocator<VGLGroupInfo>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VGLMeshLeafNode, vk_allocator<VGLMeshLeafNode>> {
    struct VGLMeshLeafNode *__begin_;
    struct VGLMeshLeafNode *__end_;
    struct __compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode>> {
        struct VGLMeshLeafNode *__first_;
    } __end_cap_;
};

struct vector<VGLRect, vk_allocator<VGLRect>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VGLRect *, vk_allocator<VGLRect>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VGLSingleTexturedGroupCullableMesh **, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap>> {
    CDStruct_183601bc *__begin_;
    CDStruct_183601bc *__end_;
    struct __compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap>> {
        CDStruct_183601bc *__first_;
    } __end_cap_;
};

struct vector<VKMapTile *, vk_allocator<VKMapTile *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VKMapTile **, vk_allocator<VKMapTile *>> {
        id *__first_;
    } __end_cap_;
};

struct vector<VKRouteLineSection, vk_allocator<VKRouteLineSection>> {
    struct VKRouteLineSection *__begin_;
    struct VKRouteLineSection *__end_;
    struct __compressed_pair<VKRouteLineSection *, vk_allocator<VKRouteLineSection>> {
        struct VKRouteLineSection *__first_;
    } __end_cap_;
};

struct vector<VKRouteMapMatchingSection::Vertex, vk_allocator<VKRouteMapMatchingSection::Vertex>> {
    struct Vertex *_field1;
    struct Vertex *_field2;
    struct __compressed_pair<VKRouteMapMatchingSection::Vertex *, vk_allocator<VKRouteMapMatchingSection::Vertex>> {
        struct Vertex *_field1;
    } _field3;
};

struct vector<_VKRealisticPolygonMetaData, vk_allocator<_VKRealisticPolygonMetaData>> {
    struct _VKRealisticPolygonMetaData *__begin_;
    struct _VKRealisticPolygonMetaData *__end_;
    struct __compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData>> {
        struct _VKRealisticPolygonMetaData *__first_;
    } __end_cap_;
};

struct vector<double, vk_allocator<double>> {
    double *_field1;
    double *_field2;
    struct __compressed_pair<double *, vk_allocator<double>> {
        double *_field1;
    } _field3;
};

struct vector<int, vk_allocator<int>> {
    int *__begin_;
    int *__end_;
    struct __compressed_pair<int *, vk_allocator<int>> {
        int *__first_;
    } __end_cap_;
};

struct vector<std::__1::basic_string<char>, vk_allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__begin_;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__end_;
    struct __compressed_pair<std::__1::basic_string<char>*, vk_allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<VGLTextMeshVAO>, vk_allocator<std::__1::shared_ptr<VGLTextMeshVAO>>> {
    struct shared_ptr<VGLTextMeshVAO> *__begin_;
    struct shared_ptr<VGLTextMeshVAO> *__end_;
    struct __compressed_pair<std::__1::shared_ptr<VGLTextMeshVAO>*, vk_allocator<std::__1::shared_ptr<VGLTextMeshVAO>>> {
        struct shared_ptr<VGLTextMeshVAO> *__first_;
    } __end_cap_;
};

struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>>> {
    shared_ptr_3dab79f3 *__begin_;
    shared_ptr_3dab79f3 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::Label>*, vk_allocator<std::__1::shared_ptr<vk::Label>>> {
        shared_ptr_3dab79f3 *__first_;
    } __end_cap_;
};

struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>>> {
    struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__begin_;
    struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__end_;
    struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>*, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>>> {
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__first_;
    } __end_cap_;
};

struct vector<std::__1::weak_ptr<altitude::LabelData>, vk_allocator<std::__1::weak_ptr<altitude::LabelData>>> {
    struct weak_ptr<altitude::LabelData> *__begin_;
    struct weak_ptr<altitude::LabelData> *__end_;
    struct __compressed_pair<std::__1::weak_ptr<altitude::LabelData>*, vk_allocator<std::__1::weak_ptr<altitude::LabelData>>> {
        struct weak_ptr<altitude::LabelData> *__first_;
    } __end_cap_;
};

struct vector<std::__1::weak_ptr<altitude::TrafficTile>, vk_allocator<std::__1::weak_ptr<altitude::TrafficTile>>> {
    struct weak_ptr<altitude::TrafficTile> *__begin_;
    struct weak_ptr<altitude::TrafficTile> *__end_;
    struct __compressed_pair<std::__1::weak_ptr<altitude::TrafficTile>*, vk_allocator<std::__1::weak_ptr<altitude::TrafficTile>>> {
        struct weak_ptr<altitude::TrafficTile> *__first_;
    } __end_cap_;
};

struct vector<unsigned char, vk_allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, vk_allocator<unsigned char>> {
        char *__first_;
    } __end_cap_;
};

struct vector<unsigned int, vk_allocator<unsigned int>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<unsigned int *, vk_allocator<unsigned int>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long *__begin_;
    unsigned long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long *__first_;
    } __end_cap_;
};

struct vector<unsigned short, vk_allocator<unsigned short>> {
    unsigned short *__begin_;
    unsigned short *__end_;
    struct __compressed_pair<unsigned short *, vk_allocator<unsigned short>> {
        unsigned short *__first_;
    } __end_cap_;
};

struct vector<vk::CollisionObject *, vk_allocator<vk::CollisionObject *>> {
    struct CollisionObject **__begin_;
    struct CollisionObject **__end_;
    struct __compressed_pair<vk::CollisionObject **, vk_allocator<vk::CollisionObject *>> {
        struct CollisionObject **__first_;
    } __end_cap_;
};

struct vector<vk::SapEntry, vk_allocator<vk::SapEntry>> {
    struct SapEntry *__begin_;
    struct SapEntry *__end_;
    struct __compressed_pair<vk::SapEntry *, vk_allocator<vk::SapEntry>> {
        struct SapEntry *__first_;
    } __end_cap_;
};

struct vector<vk::SapOverlap, vk_allocator<vk::SapOverlap>> {
    struct SapOverlap *__begin_;
    struct SapOverlap *__end_;
    struct __compressed_pair<vk::SapOverlap *, vk_allocator<vk::SapOverlap>> {
        struct SapOverlap *__first_;
    } __end_cap_;
};

struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
    struct Record *__begin_;
    struct Record *__end_;
    struct __compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record>> {
        struct Record *__first_;
    } __end_cap_;
};

struct weak_ptr<altitude::LabelData>;

struct weak_ptr<altitude::TrafficTile>;

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned long long _field8;
    char _field9;
    unsigned long long _field10;
    float _field11;
    id _field12;
    int _field13;
} CDStruct_4c1ff046;

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
} CDStruct_7523a67d;

typedef struct {
    unsigned int index;
    float offset;
} CDStruct_3f2a7a20;

typedef struct {
    unsigned int _field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
} CDStruct_6adf2384;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    double v[4][4];
} CDStruct_aa5aacbc;

typedef struct {
    unsigned int *list;
    unsigned int count;
    unsigned int size;
} CDStruct_084d6ede;

typedef struct {
    float *list;
    unsigned int count;
    unsigned int size;
} CDStruct_d570ea55;

typedef struct {
    int *list;
    unsigned int count;
    unsigned int size;
} CDStruct_56d48c16;

typedef struct {
    char orthographic;
    double width;
    double height;
    double near;
    double far;
} CDStruct_17faa5b0;

typedef struct {
    double x0;
    double x1;
    double y0;
    double y1;
} CDStruct_aca18c62;

typedef struct {
    double x;
    double y;
    double z;
} CDStruct_31142d93;

typedef struct {
    float _a;
    unsigned int _b;
    unsigned int _g;
    unsigned int _r;
} CDStruct_58ec0031;

typedef struct {
    float _field1;
    char _field2;
    char _field3;
    id _field4;
} CDStruct_ddfd0e57;

typedef struct {
    float x0;
    float x1;
    float y0;
    float y1;
    float z0;
    float z1;
} CDStruct_f3463f58;

typedef struct {
    float x;
    float y;
    float z;
} CDStruct_03942939;

typedef struct {
    float x;
    float y;
} CDStruct_6e3f967a;

typedef struct {
    int blendMode;
    float opacity;
} CDStruct_c0b8bb23;

typedef struct {
    int from;
    int to;
    float fraction;
} CDStruct_0f1abaa7;

typedef struct {
    int _field1;
    int _field2;
    int _field3;
} CDStruct_77932685;

typedef struct {
    int _field1;
    int _field2;
} CDStruct_1ef3fb1f;

typedef struct CDStruct_183601bc;

typedef struct {
    CDStruct_183601bc *road;
    unsigned int vertexIndexA;
    unsigned int vertexIndexB;
    unsigned int junctionIndexA;
    unsigned int junctionIndexB;
    CDStruct_183601bc *junctionA;
    CDStruct_183601bc *junctionB;
} CDStruct_b4689c16;

typedef struct {
    int iconStyle;
    struct _VGLColor iconBadgeColor;
    struct _VGLColor iconGradientColor[2];
    struct _VGLColor iconGlyphColor;
    struct _VGLColor iconHaloColor;
} CDStruct_ad152e0a;

typedef struct {
    CDStruct_4c1ff046 _field1;
    unsigned int _field2;
    unsigned int _field3;
    int _field4;
    int _field5;
    unsigned int _field6;
    unsigned int _field7;
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field8;
    CDStruct_183601bc *_field9;
} CDStruct_a206f7ef;

typedef struct {
    CDStruct_31142d93 position;
    double course;
    char onRoute;
} CDStruct_9a8617ed;

typedef struct {
    CDStruct_31142d93 _field1;
    CDStruct_aa5aacbc _field2;
} CDStruct_0038f5ee;

typedef struct {
    CDStruct_31142d93 position;
    CDStruct_31142d93 tangent;
    char tangentValid;
} CDStruct_03342fe8;

typedef struct {
    CDStruct_31142d93 p;
    CDStruct_31142d93 n;
} CDStruct_e77eda21;

typedef struct {
    CDStruct_2c43369c pointOfReference;
    double heading;
    CDStruct_2c43369c pointOfFocus;
    NSArray *pointsOfInterest;
    int style;
    int focusStyle;
    char animated;
    char applied;
} CDStruct_da177989;

typedef struct {
    CDStruct_58ec0031 _color;
    float _offsetX;
    float _offsetY;
    float _size;
    struct {
        unsigned int offsetX:1;
        unsigned int offsetY:1;
    } _has;
} CDStruct_79d0722e;

typedef struct {
    CDStruct_58ec0031 _color;
    float _width;
} CDStruct_f43f0670;

typedef struct {
    CDStruct_03942939 _field1;
    CDStruct_6e3f967a _field2;
    CDStruct_03942939 _field3;
} CDStruct_094d0712;

typedef struct {
    CDStruct_03942939 _field1;
    CDStruct_6e3f967a _field2;
} CDStruct_782f569c;

typedef struct {
    char _field1;
    float _field2;
    float _field3;
    float _field4;
    unsigned int _field5;
    float _field6;
    char _field7;
    char _field8;
    char _field9;
    struct _VGLColor _field10;
    struct _VGLColor _field11;
    unsigned int _field12;
    float _field13;
    id _field14;
    id _field15;
    CDStruct_ad152e0a _field16;
    char _field17;
    float _field18;
    float _field19;
    int _field20;
    char _field21;
    char _field22;
} CDStruct_125c20f7;

typedef struct {
    float _field1;
    CDStruct_aa5aacbc _field2;
    CDStruct_aa5aacbc _field3;
    CDStruct_aa5aacbc _field4;
    CDUnion_de9d7be0 _field5;
    id _field6;
    id _field7;
    id _field8;
    int _field9;
} CDStruct_63774aaa;

typedef struct {
    CDStruct_7523a67d _field1;
    struct {
        unsigned int _field1;
        int _field2;
        float _field3;
        char _field4;
        char _field5;
        char _field6;
        char _field7;
        char _field8;
        struct {
            unsigned char _field1;
            unsigned short _field2;
        } _field9[16];
    } _field2;
} CDStruct_dab2d0bd;

typedef struct {
    struct VKProfileSparseRamp<float> _field1;
    struct VKProfileSparseRamp<_VGLColor> _field2;
    int _field3;
} CDStruct_556bdc76;

typedef struct {
    struct VKProfileSparseRamp<float> _field1;
    struct VKProfileSparseRamp<float> _field2;
    struct VKProfileSparseRamp<float> _field3;
    struct VKProfileSparseRamp<float> _field4;
    struct VKProfileSparseRamp<_VGLColor> _field5;
    struct VKProfileSparseRamp<_VGLColor> _field6;
    struct VKProfileSparseRamp<signed char> _field7;
    struct VKProfileSparseRamp<int> _field8;
    struct VKProfileSparseRamp<int> _field9;
    struct VKProfileSparseRamp<signed char> _field10;
    struct VKProfileSparseRamp<signed char> _field11;
} CDStruct_47a47fda;

// Ambiguous groups
typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    double latitude;
    double longitude;
} CDStruct_2c43369c;

typedef struct {
    double width;
    double height;
} CDStruct_8caa76fc;

typedef struct {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
} CDStruct_818bb265;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} CDStruct_f2e236b6;

typedef struct __wrap_iter<VGLFontGlyphQuad_struct *> {
    struct VGLFontGlyphQuad_struct *_field1;
} __wrap_iter_b4e21cbe;

typedef struct shared_ptr<vk::Label> {
    struct Label *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3dab79f3;

typedef struct shared_ptr<zilch::TrafficDynamicTile> {
    struct TrafficDynamicTile *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_0e624577;

typedef struct unordered_map<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>>> {
    struct __hash_table<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *>*> {
                struct __hash_node<std::__1::pair<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::hash<unsigned int>, true>> {
            unsigned long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::vector<GEOVectorTilePoint, vk_allocator<GEOVectorTilePoint>>, std::__1::equal_to<unsigned int>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_69e8e828;

typedef struct vector<RouteJunctionInfo, vk_allocator<RouteJunctionInfo>> {
    struct RouteJunctionInfo *_field1;
    struct RouteJunctionInfo *_field2;
    struct __compressed_pair<RouteJunctionInfo *, vk_allocator<RouteJunctionInfo>> {
        struct RouteJunctionInfo *_field1;
    } _field3;
} vector_b376ae98;

typedef struct vector<VGLFontGlyphQuad_struct, vk_allocator<VGLFontGlyphQuad_struct>> {
    struct VGLFontGlyphQuad_struct *_field1;
    struct VGLFontGlyphQuad_struct *_field2;
    struct __compressed_pair<VGLFontGlyphQuad_struct *, vk_allocator<VGLFontGlyphQuad_struct>> {
        struct VGLFontGlyphQuad_struct *_field1;
    } _field3;
} vector_6f791529;

typedef struct vector<VGLGroupCullableMesh *, vk_allocator<VGLGroupCullableMesh *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<VGLGroupCullableMesh **, vk_allocator<VGLGroupCullableMesh *>> {
        id *__first_;
    } __end_cap_;
} vector_af2832f0;

typedef struct vector<std::__1::shared_ptr<vk::Label>, vk_allocator<std::__1::shared_ptr<vk::Label>>> {
    shared_ptr_3dab79f3 *__begin_;
    shared_ptr_3dab79f3 *__end_;
    struct __compressed_pair<std::__1::shared_ptr<vk::Label>*, vk_allocator<std::__1::shared_ptr<vk::Label>>> {
        shared_ptr_3dab79f3 *__first_;
    } __end_cap_;
} vector_51094ce7;

typedef struct vector<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>>> {
    struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__begin_;
    struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__end_;
    struct __compressed_pair<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>*, vk_allocator<std::__1::vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>>>> {
        struct vector<VGLSingleTexturedGroupCullableMesh *, vk_allocator<VGLSingleTexturedGroupCullableMesh *>> *__first_;
    } __end_cap_;
} vector_9cb5e896;

#pragma mark Typedef'd Unions

typedef union {
    struct VKProfileSparseRampValue {
        int value;
        unsigned char hi;
    } v[2];
    int *extra;
} CDUnion_5c76812d;

typedef union {
    struct {
        float m00;
        float m01;
        float m02;
        float m03;
        float m10;
        float m11;
        float m12;
        float m13;
        float m20;
        float m21;
        float m22;
        float m23;
        float m30;
        float m31;
        float m32;
        float m33;
    } ;
    float m[16];
} CDUnion_f5b85e25;

typedef union {
    struct {
        float m00;
        float m01;
        float m02;
        float m10;
        float m11;
        float m12;
        float m20;
        float m21;
        float m22;
    } ;
    float m[9];
} CDUnion_de9d7be0;

typedef union {
    struct {
        float _field1;
        float _field2;
        float _field3;
        float _field4;
    } _field1;
    float _field2[2][2];
    float _field3[4];
} CDUnion_552b2134;

