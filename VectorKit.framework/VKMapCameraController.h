/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import <VectorKit/VKCameraController.h>

#import "VKAnnotationTrackingCameraControllerDelegate-Protocol.h"
#import "VKTrackingCameraControllerDelegate-Protocol.h"

@class VKAnimation, VKAnnotationTrackingCameraController, VKMapModel, VKTrackingCameraController;

@interface VKMapCameraController : VKCameraController <VKTrackingCameraControllerDelegate, VKAnnotationTrackingCameraControllerDelegate>
{
    VKMapModel *_mapModel;
    VKAnimation *_zoomAnimation;
    VKAnimation *_pitchAnimation;
    VKAnimation *_rotationAnimation;
    VKTrackingCameraController *_trackingCameraController;
    VKAnnotationTrackingCameraController *_annotationTrackingCameraController;
    double _minDistanceToGroundAlongForwardVector;
    double _maxDistanceToGroundAlongForwardVector;
    double _canonicalSkyHeight;
    struct UIEdgeInsets _edgeInsets;
    double _beganDoublePanPitch;
    BOOL _isPitchable;
    BOOL _isPitchIncreasing;
    BOOL _trackingAutoSelectsZoomScale;
    BOOL _staysCenteredDuringPinch;
    double _lastRotation;
    BOOL _rotationLowZoomSnappingEnabled;
    BOOL _shouldRotationRubberband;
    BOOL _staysCenteredDuringRotation;
    struct CGPoint _panStartScreenPoint;
    struct CGPoint _panLastScreenPoint;
    double _tracePlaybackSpeedMultiplier;
    BOOL _shouldLimitTrackingCameraHeight;
}

@property(nonatomic) BOOL shouldLimitTrackingCameraHeight; // @synthesize shouldLimitTrackingCameraHeight=_shouldLimitTrackingCameraHeight;
@property(nonatomic) BOOL isPitchable; // @synthesize isPitchable=_isPitchable;
@property(nonatomic) double tracePlaybackSpeedMultiplier; // @synthesize tracePlaybackSpeedMultiplier=_tracePlaybackSpeedMultiplier;
@property(nonatomic) double canonicalSkyHeight; // @synthesize canonicalSkyHeight=_canonicalSkyHeight;
@property(nonatomic) struct UIEdgeInsets edgeInsets; // @synthesize edgeInsets=_edgeInsets;
@property(nonatomic) BOOL staysCenteredDuringRotation; // @synthesize staysCenteredDuringRotation=_staysCenteredDuringRotation;
@property(nonatomic) BOOL staysCenteredDuringPinch; // @synthesize staysCenteredDuringPinch=_staysCenteredDuringPinch;
@property(retain, nonatomic) VKMapModel *mapModel; // @synthesize mapModel=_mapModel;
- (void)canvasFrameDidChange;
- (void)trackingCameraController:(id)arg1 updatedStartAnimationTargetPosition:(CDStruct_31142d93)arg2 orientation:(const CDStruct_aa5aacbc *)arg3;
- (void)trackingCameraControllerDidEndAnimating:(id)arg1;
- (void)trackingCameraControllerDidBeginAnimating:(id)arg1;
- (void)trackingCameraControllerDidChangeCameraState:(id)arg1;
- (void)stopSnappingAnimations;
- (void)updateCameraZBounds;
- (BOOL)updateCameraToPositionOrientationLimits;
- (BOOL)clampZoomLevelIfNecessary;
- (void)setGesturing:(BOOL)arg1;
- (void)panWithPixelOffset:(struct CGPoint)arg1 relativeToScreenPoint:(struct CGPoint)arg2 animated:(BOOL)arg3 duration:(double)arg4 completionHandler:(id)arg5;
@property(readonly, nonatomic) BOOL canEnter3DMode;
@property(readonly, nonatomic, getter=isFullyPitched) BOOL fullyPitched;
@property(readonly, nonatomic, getter=isPitched) BOOL pitched;
- (BOOL)canPitchWithThreshold:(float)arg1;
@property(nonatomic) BOOL allowDatelineWraparound;
- (void)exit3DMode;
- (void)enter3DMode;
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;
- (void)stopPanningAtPoint:(struct CGPoint)arg1;
- (void)updatePanWithTranslation:(struct CGPoint)arg1;
- (void)startPanningAtPoint:(struct CGPoint)arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(id)arg3;
- (struct CGPoint)_scaledScreenPointForPoint:(struct CGPoint)arg1;
- (struct CGPoint)_centerScreenPoint;
@property(nonatomic) double trackingZoomScale;
- (BOOL)isAtDefaultTrackingZoomScale;
- (BOOL)isTracking;
- (BOOL)snapMapIfNecessary:(const CDStruct_31142d93 *)arg1 animated:(BOOL)arg2;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(CDStruct_31142d93)arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (void)puckAnimator:(id)arg1 updatedPosition:(CDStruct_9a8617ed *)arg2;
- (void)annotationTrackingCameraControllerDidChangeCameraState:(id)arg1;
- (id)annotationTrackingCameraController:(id)arg1 presentationForAnnotation:(id)arg2;
@property(readonly, nonatomic, getter=isAnimatingToTrackAnnotation) BOOL animatingToTrackAnnotation;
- (void)didAnimateInAnnotationMarkers:(id)arg1;
@property(readonly, nonatomic, getter=isTrackingHeading) BOOL trackingHeading;
@property(readonly, nonatomic) id <VKTrackableAnnotation> trackingAnnotation;
- (void)willAnimateInAnnotationMarkers:(id)arg1;
- (void)stopTrackingAnnotation;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(BOOL)arg2 animated:(BOOL)arg3;
- (void)startCameraMotionAnimated:(BOOL)arg1 pounceCompletionHandler:(id)arg2;
- (void)stopCameraMotion;
- (void)setCameraViewForPointOfReference:(CDStruct_c3b9c2ee)arg1 heading:(double)arg2 pointOfFocus:(CDStruct_c3b9c2ee)arg3 pointsOfInterest:(id)arg4 style:(int)arg5 focusStyle:(int)arg6 animated:(BOOL)arg7;
- (BOOL)restoreViewportFromInfo:(id)arg1;
- (id)viewportInfo;
- (void)tapZoom:(struct CGPoint)arg1 levels:(double)arg2 completionHandler:(id)arg3;
- (void)stopPinching:(struct CGPoint)arg1;
- (void)pinch:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)startPinching:(struct CGPoint)arg1;
- (void)stopPanning:(struct CGPoint)arg1;
- (void)startPanning:(struct CGPoint)arg1;
- (void)pan:(struct CGPoint)arg1;
- (void)stopPitching:(struct CGPoint)arg1;
- (void)startPitching:(struct CGPoint)arg1;
- (void)pitch:(struct CGPoint)arg1 translation:(double)arg2;
- (void)stopRotating:(struct CGPoint)arg1;
- (void)startRotating:(struct CGPoint)arg1;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint)arg2;
- (void)zoom:(double)arg1 withPoint:(CDStruct_31142d93)arg2 completionHandler:(id)arg3;
- (void)zoomToLevel:(double)arg1 withPoint:(CDStruct_31142d93)arg2;
- (double)_rubberBandOffsetForOffset:(double)arg1 maxOffset:(double)arg2 minOffset:(double)arg3 range:(double)arg4;
- (void)rotateToYaw:(double)arg1 withPoint:(const CDStruct_31142d93 *)arg2 animated:(BOOL)arg3;
- (void)rotateToPitch:(double)arg1 withPoint:(const CDStruct_31142d93 *)arg2 preserveAltitude:(BOOL)arg3 animated:(BOOL)arg4 exaggerate:(BOOL)arg5;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;
- (float)minimumPitchForNormalizedZoomLevel:(float)arg1;
- (float)currentMinimumNormalizedZoomLevel;
- (float)currentMaximumNormalizedZoomLevel;
- (int)maximumNormalizedZoomLevel;
- (int)minimumNormalizedZoomLevel;
- (float)currentStyleZoomLevel;
- (float)currentNormalizedZoomLevel;
- (float)currentDisplayZoomLevel;
- (int)tileSize;
- (CDStruct_31142d93)groundPointFromScreenPoint:(struct CGPoint)arg1;
- (void)canvasDidLayout;
- (BOOL)isAnimating;
- (id)detailedDescription;
- (void)dealloc;
- (id)init;
@property(nonatomic) BOOL trackingAutoSelectsZoomScale;

@end

