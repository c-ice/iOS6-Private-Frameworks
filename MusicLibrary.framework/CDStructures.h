/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGPoint {
    float _field1;
    float _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    float _field1;
    float _field2;
};

struct MLArtworkFormatSpec {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    int _field6;
    char _field7;
};

struct MLArtworkInstanceInfo {
    struct MLArtworkFormatSpec _field1;
    struct CGRect _field2;
};

struct _Hash_node<long long, false>;

struct _Hash_node<std::pair<const long long, ML3NameOrder>, false>;

struct _Hash_node<std::pair<const long long, NSString *>, false>;

struct _Identity<long long>;

struct _Mod_range_hashing;

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct _Prime_rehash_policy {
    float _M_max_load_factor;
    float _M_growth_factor;
    unsigned long _M_next_resize;
};

struct _Select1st<std::pair<const long long, ML3NameOrder>>;

struct _Select1st<std::pair<const long long, NSString *>>;

struct __MLDBValue {
    struct sqlite3_stmt *_field1;
    int _field2;
};

struct allocator<std::tr1::__detail::_Hash_node<long long, false>>;

struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, ML3NameOrder>, false>>;

struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, NSString *>, false>>;

struct equal_to<long long>;

struct hash<long long>;

struct sqlite3_module {
    int _field1;
    void *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
    void *_field6;
    void *_field7;
    void *_field8;
    void *_field9;
    void *_field10;
    void *_field11;
    void *_field12;
    void *_field13;
    void *_field14;
    void *_field15;
    void *_field16;
    void *_field17;
    void *_field18;
    void *_field19;
    void *_field20;
    void *_field21;
    void *_field22;
    void *_field23;
};

struct sqlite3_stmt;

struct unordered_map<long long, ML3NameOrder, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, ML3NameOrder>>, false> {
    struct _Select1st<std::pair<const long long, ML3NameOrder>> _field1;
    struct equal_to<long long> _field2;
    struct hash<long long> _field3;
    struct _Mod_range_hashing _field4;
    struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, ML3NameOrder>, false>> _field5;
    struct _Hash_node<std::pair<const long long, ML3NameOrder>, false> **_field6;
    unsigned int _field7;
    unsigned int _field8;
    struct _Prime_rehash_policy _field9;
};

struct unordered_map<long long, NSString *, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, NSString *>>, false> {
    struct _Select1st<std::pair<const long long, NSString *>> _M_extract;
    struct equal_to<long long> _M_eq;
    struct hash<long long> _M_h1;
    struct _Mod_range_hashing _M_h2;
    struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, NSString *>, false>> _M_node_allocator;
    struct _Hash_node<std::pair<const long long, NSString *>, false> **_M_buckets;
    unsigned int _M_bucket_count;
    unsigned int _M_element_count;
    struct _Prime_rehash_policy _M_rehash_policy;
};

struct unordered_set<long long, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<long long>, false> {
    struct _Identity<long long> _field1;
    struct equal_to<long long> _field2;
    struct hash<long long> _field3;
    struct _Mod_range_hashing _field4;
    struct allocator<std::tr1::__detail::_Hash_node<long long, false>> _field5;
    struct _Hash_node<long long, false> **_field6;
    unsigned int _field7;
    unsigned int _field8;
    struct _Prime_rehash_policy _field9;
};

struct vector<long long, std::allocator<long long>> {
    struct _Vector_impl {
        long long *_M_start;
        long long *_M_finish;
        long long *_M_end_of_storage;
    } _M_impl;
};

struct vector<unsigned char, std::allocator<unsigned char>> {
    struct _Vector_impl {
        char *_M_start;
        char *_M_finish;
        char *_M_end_of_storage;
    } _M_impl;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    char _field5;
    char _field6;
    char _field7;
    char _field8;
} CDStruct_59d560b1;

typedef struct {
    long long _field1;
    int _field2;
} CDStruct_87dc826d;

// Template types
typedef struct unordered_map<long long, ML3NameOrder, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, ML3NameOrder>>, false> {
    struct _Select1st<std::pair<const long long, ML3NameOrder>> _field1;
    struct equal_to<long long> _field2;
    struct hash<long long> _field3;
    struct _Mod_range_hashing _field4;
    struct allocator<std::tr1::__detail::_Hash_node<std::pair<const long long, ML3NameOrder>, false>> _field5;
    struct _Hash_node<std::pair<const long long, ML3NameOrder>, false> **_field6;
    unsigned int _field7;
    unsigned int _field8;
    struct _Prime_rehash_policy _field9;
} unordered_map_c7c31617;

typedef struct unordered_set<long long, std::tr1::hash<long long>, std::equal_to<long long>, std::allocator<long long>, false> {
    struct _Identity<long long> _field1;
    struct equal_to<long long> _field2;
    struct hash<long long> _field3;
    struct _Mod_range_hashing _field4;
    struct allocator<std::tr1::__detail::_Hash_node<long long, false>> _field5;
    struct _Hash_node<long long, false> **_field6;
    unsigned int _field7;
    unsigned int _field8;
    struct _Prime_rehash_policy _field9;
} unordered_set_a245ffee;

typedef struct vector<long long, std::allocator<long long>> {
    struct _Vector_impl {
        long long *_M_start;
        long long *_M_finish;
        long long *_M_end_of_storage;
    } _M_impl;
} vector_6f037ce7;

