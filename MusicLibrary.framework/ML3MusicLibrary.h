/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class ML3Container, ML3DatabaseMetadata, ML3MusicLibrary_SQLiteDatabaseContext, ML3NondurableWriteSet, ML3SqliteDatabase, ML3UbiquitousDatabase, MLSQLiteConnection, NSArray, NSCountedSet, NSMutableArray, NSObject<OS_dispatch_queue>, NSString;

@interface ML3MusicLibrary : NSObject
{
    NSString *_path;
    BOOL _enableWrites;
    ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;
    ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;
    MLSQLiteConnection *_inMemoryDatabaseConnection;
    NSObject<OS_dispatch_queue> *_atomicityQueue;
    ML3UbiquitousDatabase *_ubiquitousDatabase;
    ML3SqliteDatabase *_geniusDatabase;
    NSCountedSet *_notifyNamesToIgnore;
    NSMutableArray *_pendingNotifyPostNames;
    NSString *_notifyName;
    int _notifyToken;
    NSString *_nonContentsNotifyName;
    int _nonContentsNotifyToken;
    NSString *_invisiblePropertyNotifyName;
    int _invisiblePropertyNotifyToken;
    NSString *_displayValuesNotifyName;
    int _displayValuesNotifyToken;
    NSString *_syncGenerationNotifyName;
    int _syncGenerationNotifyToken;
    NSString *_libraryUIDNotifyName;
    int _libraryUIDNotifyToken;
    BOOL _requiresProcessAssertion;
    int _backupDisabledCount;
    BOOL _backupNeeded;
    BOOL _hasEverConnectedToDatabase;
    id _mcSettingsObserver;
    id _loggingObserver;
    NSObject<OS_dispatch_queue> *_nondurableConcurrentQueue;
    ML3NondurableWriteSet *_nondurableWriteSet;
    NSString *_artworkDirectory;
    char _artworkDirectoryFilesystemRepresentation[1024];
    BOOL _hasEverConnectedTo;
    BOOL _keepPresignedValidyAfterVerification;
}

+ (unsigned int)numberOfArtworkStyles;
+ (unsigned int)readableArtworkFormatIDForArtworkFormatID:(unsigned int)arg1;
+ (struct MLArtworkFormatSpec)artworkFormatSpecForArtworkFormatID:(unsigned int)arg1;
+ (id)allArtworkFormatSizes;
+ (id)_purgeableTrackPredicateWithUrgency:(int)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)sectionIndexTitles;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (BOOL)executeSQL:(id)arg1 usingHandle:(struct sqlite3 *)arg2;
+ (void)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(char *)arg2 didFinish:(char *)arg3;
+ (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;
+ (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;
+ (id)_newDatabaseConnectionForPath:(id)arg1 enableWrites:(BOOL)arg2 forLibrary:(id)arg3;
+ (void)connection:(id)arg1 willCloseDBHandle:(struct sqlite3 *)arg2;
+ (void)connection:(id)arg1 didOpenDBHandle:(struct sqlite3 *)arg2;
+ (id)newDatabaseConnectionForPath:(id)arg1 enableWrites:(BOOL)arg2;
+ (id)fallbackGeniusDatabaseFilePath;
+ (id)geniusDatabaseFilePath;
+ (id)mainDatabasePath;
+ (BOOL)updateTrackIntegrityOnConnection:(id)arg1;
+ (id)sharedLibrary;
+ (void)setImportationEnabled:(BOOL)arg1;
+ (BOOL)importationEnabled;
+ (void)initialize;
+ (void)beginDatabaseMigrationIfNecessary;
+ (BOOL)updateSortMapOnConnection:(id)arg1;
+ (BOOL)_inTransactionUpdateSearchMapOnConnection:(id)arg1;
+ (BOOL)_inTransactionUpdateSortMapOnConnection:(id)arg1;
+ (BOOL)createIndexesUsingConnection:(id)arg1;
+ (BOOL)dropIndexesUsingConnection:(id)arg1;
+ (BOOL)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;
+ (BOOL)migrateToCurrentUserVersionUsingConnection:(id)arg1;
+ (BOOL)orderingLanguageMatchesSystemUsingConnection:(id)arg1;
+ (BOOL)userVersionMatchesSystemUsingConnection:(id)arg1;
+ (int)userVersionUsingConnection:(id)arg1;
+ (id)systemCurrentLanguage;
+ (BOOL)buildDatabaseTablesUsingConnection:(id)arg1;
+ (id)indexSchemaSQL;
+ (id)itemIndexSchemaSQL;
+ (id)allSchemaSQL;
+ (id)itemSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (int)currentUserVersion;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 createParentFolderIfNecessary:(BOOL)arg4;
+ (id)pathForResourceFileOrFolder:(int)arg1;
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(BOOL)arg3 isFolder:(char *)arg4;
+ (id)controlDirectoryPathWithBasePath:(id)arg1;
+ (id)mediaFolderRelativePath:(id)arg1;
+ (id)mediaFolderPath;
@property(nonatomic) BOOL keepPresignedValidyAfterVerification; // @synthesize keepPresignedValidyAfterVerification=_keepPresignedValidyAfterVerification;
@property(readonly, nonatomic) BOOL hasEverConnectedToDatabase; // @synthesize hasEverConnectedToDatabase=_hasEverConnectedTo;
@property(readonly) NSString *path; // @synthesize path=_path;
- (void).cxx_destruct;
- (void)removeOrphanedTracks;
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)arg1;
- (BOOL)_commitNondurableWrites;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (id)valueForDatabaseProperty:(id)arg1;
- (id)appleIDForDSID:(unsigned long long)arg1;
- (BOOL)setAppleID:(id)arg1 forDSID:(unsigned long long)arg2;
- (void)_accessAccountCacheDBForSQL:(id)arg1 usingBlock:(id)arg2;
- (void)migrateAlbumListJPEGToBGRA;
- (void)migrateAlbumGridBGRA1xToJPEG1x;
- (void)_migrateArtworkFrom:(unsigned int)arg1 to:(unsigned int)arg2;
- (BOOL)migrateLegacyArtworkFromArtworkBlobFilePath:(id)arg1;
- (BOOL)compactArtwork;
- (BOOL)deleteArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (BOOL)deleteArtworkForCacheID:(id)arg1;
- (BOOL)deleteAllArtwork;
- (BOOL)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2;
- (BOOL)writeToDatabaseArtworkForCacheID:(id)arg1 length:(unsigned long)arg2 formatID:(unsigned int)arg3 imageSubRect:(struct CGRect)arg4;
- (BOOL)writeToDiskArtworkWithImageData:(id)arg1 forCacheID:(id)arg2 resultingLengths:(unsigned int **)arg3 formatIDs:(unsigned int **)arg4 imageSubRects:(struct CGRect **)arg5 count:(unsigned int *)arg6;
- (BOOL)hasArtworkForCacheID:(id)arg1 ensureArtworkFileExists:(BOOL)arg2;
- (BOOL)hasArtworkForCacheID:(id)arg1;
- (void)loadArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 completionHandler:(id)arg3;
- (id)artworkDataForCacheID:(id)arg1 formatID:(unsigned int)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(int)arg2 respectSongMattress:(BOOL)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(int)arg2;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)arg1 respectSongMattress:(BOOL)arg2;
- (long long)autoFilledTracksTotalSizeWithUrgency:(int)arg1;
@property(readonly) long long autoFilledTracksTotalSize;
- (void)_enumeratePurgeableTracksForUrgency:(int)arg1 respectSongMattress:(BOOL)arg2 usingBlock:(id)arg3;
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(int)arg2 usingBlock:(id)arg3;
- (BOOL)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(int)arg3;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned int)arg2 usingBlock:(id)arg3;
- (void)setLibraryUID:(id)arg1;
- (id)libraryUID;
@property long long syncGenerationID;
@property(readonly) long long currentContentRevision;
@property(readonly) long long currentRevision;
@property(readonly) long long persistentID;
- (BOOL)updateSortMap;
- (long long)addStringToSortMap:(id)arg1;
- (BOOL)isReadable;
- (BOOL)_mustProcessLanguageChange;
@property(readonly) BOOL mediaRestrictionEnabled;
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)arg1;
- (void)_postInvisiblePropertyChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_delayableNotifyPost:(id)arg1 localNotificationName:(id)arg2;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)savePlaylists;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadata;
@property(readonly) NSArray *preferredSubtitleTracks;
@property(readonly) NSArray *preferredAudioTracks;
@property(readonly) ML3DatabaseMetadata *databaseInfo;
@property(readonly) ML3Container *purchasedTracksPlaylist;
- (void)notifyDisplayValuesPropertyDidChange;
- (void)notifyInvisiblePropertyDidChange;
- (void)notifyNonContentsPropertyDidChange;
- (void)notifyContentsDidChange;
- (unsigned int)sectionIndexTitleIndexForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionHeaderForSectionIndex:(unsigned int)arg1;
@property(readonly) NSArray *localizedSectionIndexTitles;
- (void)performTransactionKind:(int)arg1 waitIfBusy:(BOOL)arg2 withBlock:(id)arg3;
- (void)performTransactionKind:(int)arg1 withBlock:(id)arg2;
- (void)performTransactionAllowingWrites:(BOOL)arg1 withBlock:(id)arg2;
- (void)performTransactionWithBlock:(id)arg1;
@property(readonly, nonatomic, getter=isNondurableWritingActive) BOOL nondurableWritingActive;
- (void)prepareStatementForSQL:(id)arg1 usingBlock:(id)arg2;
- (void)prepareStatementForSQL:(id)arg1 cache:(BOOL)arg2 usingBlock:(id)arg3;
- (void)statementWithSQL:(id)arg1 cache:(BOOL)arg2 usingBlock:(id)arg3;
- (void)statementWithSQL:(id)arg1 usingBlock:(id)arg2;
- (id)statementWithSQL:(id)arg1;
- (BOOL)_writeImageBytes:(const void *)arg1 length:(unsigned long)arg2 formatID:(unsigned int)arg3 cacheID:(id)arg4;
- (BOOL)_writeCGImage:(struct CGImage *)arg1 length:(unsigned long)arg2 forCacheID:(id)arg3 formatID:(unsigned int)arg4 imageSubRect:(struct CGRect)arg5;
- (BOOL)_drawAndWriteImage:(struct CGImage *)arg1 outputWidth:(unsigned long)arg2 outputHeight:(unsigned long)arg3 colorSpace:(struct CGColorSpace *)arg4 cacheID:(id)arg5 formatID:(unsigned int)arg6 artworkStyle:(CDStruct_59d560b1 *)arg7 resultingImageSubRect:(struct CGRect *)arg8 resultingLength:(unsigned int *)arg9;
- (BOOL)_runStatementWithSQL:(id)arg1 bindingValue:(id)arg2:(id)arg3;
- (BOOL)runStatementWithSQL:(id)arg1 bindingValue:(id)arg2;
- (long long)_int64ValueForFirstRowAndColumnWithSQL:(id)arg1;
- (BOOL)deleteDatabase;
- (id)groupingKeysForStrings:(id)arg1;
- (id)groupingKeyForString:(id)arg1;
- (void)accessSortKeyBuilder:(id)arg1;
- (void)accessConnectionUsingBlock:(id)arg1;
- (void)accessDatabaseUsingBlock:(id)arg1;
- (void)reconnectToDatabaseWithCompletionHandler:(id)arg1;
- (void)reconnectToDatabase;
- (BOOL)populateStaticItemsOfDynamicContainers;
- (BOOL)executeSQL:(id)arg1;
@property(readonly) BOOL requiresPostProcessing;
- (id)newDatabaseConnection;
- (void)dealloc;
- (id)geniusDatabase;
- (id)_newGeniusDBConnectionAtPath:(id)arg1;
- (id)ubiquitousDatabase;
- (void)resetUbiquitousMetadata;
@property(readonly, nonatomic) BOOL writable;
- (void)updateTrackIntegrity;
- (void)migratePresignedValidity;
- (BOOL)verifyPresignedValidity;
- (BOOL)hasPresignedValidity;
- (void)deletePresignedValidity;
- (void)_postLibraryNotification:(id)arg1 isSourceExternal:(BOOL)arg2 userInfo:(id)arg3;
- (id)initWithPath:(id)arg1 enableWrites:(BOOL)arg2;
- (void)_enumerateDatabaseContextsUsingBlock:(id)arg1;
- (void)_accessDatabaseContextUsingBlock:(id)arg1;
- (void)_onMainQueuePerformDatabaseContextBlock:(id)arg1;
- (void)_onBackgroundQueuePerformDatabaseContextBlock:(id)arg1;
- (void)statementWithSQLPrefix:(id)arg1 inPersistentIDs:(const long long *)arg2 count:(unsigned int)arg3 usingBlock:(id)arg4;
- (id)nondurableWriteSetForWriting;
- (id)nondurableWriteSetForReading;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(BOOL)arg5;
- (id)genreForGenre:(id)arg1;
- (id)composerForComposerName:(id)arg1;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;
- (BOOL)handlePrepareDatabase;
- (BOOL)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (BOOL)resetAllContents;
- (BOOL)removeLocationsForItemsMissingAssets;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)_insertStringsIntoSortMapOrFail:(id)arg1;
- (CDStruct_87dc826d)nameOrderForString:(id)arg1;
- (BOOL)coerceValidDatabase;
- (BOOL)deleteAndRecreateDatabaseUsingConnection:(id)arg1;
- (BOOL)createIndexes;
- (BOOL)dropItemIndexes;
- (BOOL)buildDatabaseTables;
- (id)locationKindForKind:(id)arg1;
- (BOOL)importTracksFromDataSource:(id)arg1 progressHandler:(id)arg2;
- (BOOL)importTracksFromDataSource:(id)arg1;
- (id)_existingAlbumStatesForGroupingIdentifiers:(id)arg1;
- (id)_existingCollectionPIDsForTable:(id)arg1 groupingNames:(id)arg2 groupingKeysForGroupingNames:(id)arg3;
- (void)_populateNameOrderForPID:(unordered_map_c7c31617 *)arg1 table:(id)arg2 nameSQL:(id)arg3;
- (id)_insertIntoChapterUsingVtabSQL;
- (id)_replaceIntoPurgeableListUsingVtabSQL;
- (id)_insertIntoPurgeableListUsingVtabSQL;
- (id)_insertIntoItemSearchUsingVtabSQL;
- (id)_insertIntoItemStatsUsingVtabSQL;
- (id)_insertIntoItemExtraUsingVtabSQL;
- (id)_insertIntoItemUsingVtabSQL;
- (long long)_baseLocationPIDFromDataSource:(id)arg1;
- (long long)_locationKindPIDFromDataSource:(id)arg1;
- (long long)_composerPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingComposerPIDsForGroupingKeys:(id)arg3 insertIntoComposerStatement:(id)arg4;
- (id)_insertIntoComposerStatement;
- (id)_composerGroupingNameFromDataSource:(id)arg1;
- (long long)_genrePIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingGenrePIDsForGroupingKeys:(id)arg3 insertIntoGenreStatement:(id)arg4;
- (id)_insertIntoGenreStatement;
- (id)_genreGroupingNameFromDataSource:(id)arg1;
- (long long)_albumPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 albumArtistPID:(long long)arg3 existingAlbumStatesForGroupingIdentifiers:(id)arg4 insertIntoAlbumStatement:(id)arg5 groupingKeysForGroupingNames:(id)arg6;
- (id)_insertIntoAlbumStatement;
- (id)_albumGroupingIdentifierFromDataSource:(id)arg1 albumArtistPersistentID:(long long)arg2 groupingKeysForGroupingNames:(id)arg3;
- (long long)_albumArtistPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingAlbumArtistPIDsForGroupingKeys:(id)arg3 insertIntoAlbumArtistStatement:(id)arg4;
- (id)_insertIntoAlbumArtistStatement;
- (id)_albumArtistGroupingNameFromDataSource:(id)arg1;
- (long long)_artistPIDFromDataSource:(id)arg1 sortableNames:(id)arg2 existingArtistPIDsForGroupingKeys:(id)arg3 insertIntoItemArtistStatement:(id)arg4;
- (id)_insertIntoItemArtistStatement;
- (id)_artistGroupingNameFromDataSource:(id)arg1;

@end

