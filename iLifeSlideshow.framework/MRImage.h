/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class EAGLContext, MRImageManager, MRTexture, NSDictionary, NSMutableDictionary, NSString;

@interface MRImage : NSObject
{
    MRImageManager *mImageManager;
    unsigned long mWidth;
    unsigned long mHeight;
    MRImage *mRefImage;
    NSString *mImageBufferKey;
    MRTexture *mTexture;
    unsigned long mPixelFormat;
    float mCenterX;
    float mCenterY;
    float mScale;
    float mRotationAngle;
    NSString *mFilterID;
    NSDictionary *mShader;
    int mClampMode;
    double mSourceTimeStamp;
    double mRenderTime;
    int mRetainByUserCount;
    float mColor[4];
    struct __IOSurface *mIOSurface;
    struct __CVBuffer *mCVPixelBuffer;
    struct CGContext *mCGContext;
    struct CGColorSpace *mColorspace;
    void *mDatas[3];
    unsigned long mDataSize;
    unsigned long mDataRowBytes;
    unsigned long mDataWidth;
    unsigned long mDataHeight;
    unsigned char mOrientation;
    NSMutableDictionary *mUserData;
    struct __CVBuffer *mCVTexture;
    unsigned long mFlags;
}

@property(nonatomic) int clampMode; // @synthesize clampMode=mClampMode;
@property(nonatomic) double renderTime; // @synthesize renderTime=mRenderTime;
@property(nonatomic) double sourceTimeStamp; // @synthesize sourceTimeStamp=mSourceTimeStamp;
@property(retain) NSDictionary *shader; // @synthesize shader=mShader;
@property(copy, nonatomic) NSString *filterID; // @synthesize filterID=mFilterID;
@property(nonatomic) float rotationAngle; // @synthesize rotationAngle=mRotationAngle;
@property(nonatomic) float scale; // @synthesize scale=mScale;
@property(nonatomic) float centerY; // @synthesize centerY=mCenterY;
@property(nonatomic) float centerX; // @synthesize centerX=mCenterX;
@property(readonly, nonatomic) unsigned long pixelFormat; // @synthesize pixelFormat=mPixelFormat;
@property(readonly, nonatomic) unsigned long height; // @synthesize height=mHeight;
@property(readonly, nonatomic) unsigned long width; // @synthesize width=mWidth;
@property(readonly) MRImageManager *imageManager; // @synthesize imageManager=mImageManager;
- (void)uploadCGImage:(struct CGImage *)arg1 toTextureRect:(struct CGRect)arg2;
- (void)addOverlayForROI:(id)arg1;
@property(readonly) MRTexture *textureIfExists;
@property(readonly, nonatomic) EAGLContext *updateGLContext;
@property(readonly, nonatomic) unsigned int textureTarget;
@property(readonly, nonatomic) unsigned int textureName;
@property(readonly) MRTexture *texture;
@property(readonly, nonatomic) BOOL isYUV;
@property(readonly, nonatomic) BOOL hasKBOrShader;
- (struct CGSize)relativeSizeInContextPixelSize:(struct CGSize)arg1;
- (void)unsetOnContext:(id)arg1 onTextureUnit:(unsigned int)arg2 state:(const CDStruct_2920cfb7 *)arg3;
- (void)setOnContext:(id)arg1 onTextureUnit:(unsigned int)arg2 withReferenceAspectRatio:(float)arg3 state:(CDStruct_2920cfb7 *)arg4;
- (void)getMatrix:(float [16])arg1 forReferenceAspectRatio:(float)arg2;
- (void)kenburnsMatrix:(float [16])arg1 forReferenceAspectRatio:(float)arg2;
@property(readonly, nonatomic) BOOL isEmpty;
@property(readonly, nonatomic) float aspectRatio;
@property(readonly) NSMutableDictionary *userData;
@property(readonly) NSString *imageBufferKey;
@property(nonatomic) BOOL hasKenBurns;
@property(nonatomic) BOOL preservesAspectRatio;
@property(nonatomic) BOOL mipmapFiltersNearest;
- (void)generateMipmap;
@property(readonly) BOOL usesMipmapping;
@property(readonly, nonatomic) BOOL isOpaque;
@property(nonatomic) BOOL filtersNearest;
@property(readonly, nonatomic) BOOL isMonochromatic;
@property(readonly, nonatomic) BOOL isPremultiplied;
@property(nonatomic) BOOL usesBackgroundColorAsBorderColor;
- (id)retainedByUserImageWithShader:(id)arg1;
- (id)retainedByUserImage;
- (void)removingFromCollection;
- (id)insertingInCollection;
- (void)releaseByUser;
- (id)retainByUser;
- (void)cleanup;
- (void)finalize;
- (void)dealloc;
- (id)initWithCGContext:(struct CGContext *)arg1 imageManager:(id)arg2;
- (id)initWithCGContext:(struct CGContext *)arg1 size:(struct CGSize)arg2 imageManager:(id)arg3;
- (id)initWithCVTexture:(struct __CVBuffer *)arg1 size:(struct CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(BOOL)arg5;
- (id)initWithCVPixelBuffer:(struct __CVBuffer *)arg1 size:(struct CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(BOOL)arg5;
- (id)initWithCVPixelBuffer:(struct __CVBuffer *)arg1 size:(struct CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5 monochromatic:(BOOL)arg6;
- (id)initWithCGImage:(struct CGImage *)arg1 textureSize:(struct CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(BOOL)arg5;
- (id)initWithCGImage:(struct CGImage *)arg1 textureSize:(struct CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5 monochromatic:(BOOL)arg6;
- (id)initWithIOSurface:(struct __IOSurface *)arg1 imageManager:(id)arg2;
- (id)initWithIOSurface:(struct __IOSurface *)arg1 imageBufferKey:(id)arg2 imageManager:(id)arg3;
- (id)initWithIOSurface:(struct __IOSurface *)arg1 size:(struct CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4;
- (id)initWithIOSurface:(struct __IOSurface *)arg1 size:(struct CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5;
- (id)initWithImage:(id)arg1;
- (id)initWithTexture:(id)arg1;
- (id)initWithSize:(struct CGSize)arg1 andColor:(const float *)arg2 imageBufferKey:(id)arg3 imageManager:(id)arg4 options:(id)arg5;
- (id)init;

@end

