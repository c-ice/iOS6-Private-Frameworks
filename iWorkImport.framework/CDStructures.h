/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct Action;

struct ActionFinder;

struct CGAffineTransform {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
    float _field6;
};

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct FindLinesContext {
    char _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct __CFArray *_field4;
    char _field5;
    int _field6;
};

struct GQHPathEndPointInfo {
    char _field1;
    struct CGPoint _field2;
    struct CGPoint _field3;
    struct CGPoint _field4;
    struct CGPoint _field5;
    int _field6;
};

struct GQZEndOfCentralDirectory {
    unsigned int _field1;
    long long _field2;
    long long _field3;
};

struct NSObjectComparator<GQDWrapPoint> {
    SEL _field1;
};

struct SFUZipEndOfCentralDirectory {
    unsigned int _field1;
    long long _field2;
    long long _field3;
};

struct StateSpec {
    void **_field1;
    char *_field2;
    int _field3;
    int _field4;
    struct Action *_field5;
    void *_field6;
    void *_field7;
    void *_field8;
    struct ActionFinder *_field9;
};

struct _Deque_iterator<std::pair<const Action *, int>, std::pair<const Action *, int>&, std::pair<const Action *, int>*> {
    struct pair<const Action *, int> *_field1;
    struct pair<const Action *, int> *_field2;
    struct pair<const Action *, int> *_field3;
    struct pair<const Action *, int> **_field4;
};

struct _Deque_iterator<std::tr1::shared_ptr<StateSpec>, std::tr1::shared_ptr<StateSpec>&, std::tr1::shared_ptr<StateSpec>*> {
    struct shared_ptr<StateSpec> *_field1;
    struct shared_ptr<StateSpec> *_field2;
    struct shared_ptr<StateSpec> *_field3;
    struct shared_ptr<StateSpec> **_field4;
};

struct _Rb_tree<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::_Identity<GQUtility::ObjcSharedPtr<GQDWrapPoint>>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> {
    struct _Rb_tree_impl<GQUtility::NSObjectComparator<GQDWrapPoint>, false> _field1;
};

struct _Rb_tree_impl<GQUtility::NSObjectComparator<GQDWrapPoint>, false> {
    struct NSObjectComparator<GQDWrapPoint> _field1;
    struct _Rb_tree_node_base _field2;
    unsigned int _field3;
};

struct _Rb_tree_node_base {
    int _field1;
    struct _Rb_tree_node_base *_field2;
    struct _Rb_tree_node_base *_field3;
    struct _Rb_tree_node_base *_field4;
};

struct __sbuf {
    char *_field1;
    int _field2;
};

struct _xmlBuffer;

struct _xmlCharEncodingHandler;

struct _xmlDoc {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    int _field10;
    int _field11;
    struct _xmlDtd *_field12;
    struct _xmlDtd *_field13;
    struct _xmlNs *_field14;
    char *_field15;
    char *_field16;
    void *_field17;
    void *_field18;
    char *_field19;
    int _field20;
    struct _xmlDict *_field21;
    void *_field22;
    int _field23;
    int _field24;
};

struct _xmlDtd;

struct _xmlNode {
    void *_field1;
    int _field2;
    char *_field3;
    struct _xmlNode *_field4;
    struct _xmlNode *_field5;
    struct _xmlNode *_field6;
    struct _xmlNode *_field7;
    struct _xmlNode *_field8;
    struct _xmlDoc *_field9;
    struct _xmlNs *_field10;
    char *_field11;
    struct _xmlAttr *_field12;
    struct _xmlNs *_field13;
    void *_field14;
    unsigned short _field15;
    unsigned short _field16;
};

struct _xmlNs {
    struct _xmlNs *_field1;
    int _field2;
    char *_field3;
    char *_field4;
    void *_field5;
    struct _xmlDoc *_field6;
};

struct deque<std::pair<const Action *, int>, std::allocator<std::pair<const Action *, int>>> {
    struct _Deque_impl {
        struct pair<const Action *, int> **_field1;
        unsigned int _field2;
        struct _Deque_iterator<std::pair<const Action *, int>, std::pair<const Action *, int>&, std::pair<const Action *, int>*> _field3;
        struct _Deque_iterator<std::pair<const Action *, int>, std::pair<const Action *, int>&, std::pair<const Action *, int>*> _field4;
    } _field1;
};

struct deque<std::tr1::shared_ptr<StateSpec>, std::allocator<std::tr1::shared_ptr<StateSpec>>> {
    struct _Deque_impl {
        struct shared_ptr<StateSpec> **_field1;
        unsigned int _field2;
        struct _Deque_iterator<std::tr1::shared_ptr<StateSpec>, std::tr1::shared_ptr<StateSpec>&, std::tr1::shared_ptr<StateSpec>*> _field3;
        struct _Deque_iterator<std::tr1::shared_ptr<StateSpec>, std::tr1::shared_ptr<StateSpec>&, std::tr1::shared_ptr<StateSpec>*> _field4;
    } _field1;
};

struct internal_state;

struct pair<const Action *, int>;

struct set<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> {
    struct _Rb_tree<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::_Identity<GQUtility::ObjcSharedPtr<GQDWrapPoint>>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> _field1;
};

struct shared_ptr<StateSpec>;

struct stack<std::pair<const Action *, int>, std::deque<std::pair<const Action *, int>, std::allocator<std::pair<const Action *, int>>>> {
    struct deque<std::pair<const Action *, int>, std::allocator<std::pair<const Action *, int>>> _field1;
};

struct stack<std::tr1::shared_ptr<StateSpec>, std::deque<std::tr1::shared_ptr<StateSpec>, std::allocator<std::tr1::shared_ptr<StateSpec>>>> {
    struct deque<std::tr1::shared_ptr<StateSpec>, std::allocator<std::tr1::shared_ptr<StateSpec>>> _field1;
};

struct vector<GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> {
    struct _Vector_impl {
        struct ObjcSharedPtr<GQDWrapPoint> *_field1;
        struct ObjcSharedPtr<GQDWrapPoint> *_field2;
        struct ObjcSharedPtr<GQDWrapPoint> *_field3;
    } _field1;
};

struct vector<float, std::allocator<float>> {
    struct _Vector_impl {
        float *_field1;
        float *_field2;
        float *_field3;
    } _field1;
};

struct vector<unsigned short, std::allocator<unsigned short>> {
    struct _Vector_impl {
        unsigned short *_field1;
        unsigned short *_field2;
        unsigned short *_field3;
    } _field1;
};

struct z_stream_s {
    char *next_in;
    unsigned int avail_in;
    unsigned int total_in;
    char *next_out;
    unsigned int avail_out;
    unsigned int total_out;
    char *msg;
    struct internal_state *state;
    void *zalloc;
    void *zfree;
    void *opaque;
    int data_type;
    unsigned int adler;
    unsigned int reserved;
};

#pragma mark Typedef'd Structures

typedef struct {
    void *_field1;
    void *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
} CDStruct_ba543347;

typedef struct {
    int location;
    int length;
} CDStruct_dff5684f;

// Template types
typedef struct set<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> {
    struct _Rb_tree<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::_Identity<GQUtility::ObjcSharedPtr<GQDWrapPoint>>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> _field1;
} set_ac3beeb4;

typedef struct stack<std::pair<const Action *, int>, std::deque<std::pair<const Action *, int>, std::allocator<std::pair<const Action *, int>>>> {
    struct deque<std::pair<const Action *, int>, std::allocator<std::pair<const Action *, int>>> _field1;
} stack_52c9a520;

typedef struct stack<std::tr1::shared_ptr<StateSpec>, std::deque<std::tr1::shared_ptr<StateSpec>, std::allocator<std::tr1::shared_ptr<StateSpec>>>> {
    struct deque<std::tr1::shared_ptr<StateSpec>, std::allocator<std::tr1::shared_ptr<StateSpec>>> _field1;
} stack_b6de2217;

typedef struct vector<GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint>>> {
    struct _Vector_impl {
        struct ObjcSharedPtr<GQDWrapPoint> *_field1;
        struct ObjcSharedPtr<GQDWrapPoint> *_field2;
        struct ObjcSharedPtr<GQDWrapPoint> *_field3;
    } _field1;
} vector_8a2ced25;

typedef struct vector<float, std::allocator<float>> {
    struct _Vector_impl {
        float *_field1;
        float *_field2;
        float *_field3;
    } _field1;
} vector_7080b1cc;

typedef struct vector<unsigned short, std::allocator<unsigned short>> {
    struct _Vector_impl {
        unsigned short *_field1;
        unsigned short *_field2;
        unsigned short *_field3;
    } _field1;
} vector_e7f19545;

